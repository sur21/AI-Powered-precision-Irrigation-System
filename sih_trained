# -*- coding: utf-8 -*-
"""SIH TRAINED .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AvpkAxJnU_ToH-ggzlZk9DGQ3C-fMWUe
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly_express as px


data = pd.read_csv('Crop_recommendation.csv')
data.head()

pip install plotly_express

pip install plotly

print(data.info())
print("")
print(data.describe())
print("")
print(data.isnull().sum())

for col in data.columns:
    fig = px.histogram(data, x = col, color_discrete_sequence=['indianred'],text_auto=True)
    fig.show()

fig = px.box(data.drop(columns="label"), title="Box Plots of Numerical Features")
fig.show()

sns.pairplot(data)

figure = plt.figure(figsize=(12, 6))
sns.heatmap(data.drop(columns = 'label').corr(),annot=True, cmap="crest")

label_groupby = data.groupby('label').mean().reset_index()
label_groupby

import matplotlib.pyplot as plt

feature_columns = label_groupby.columns[1:]
num_rows = len(feature_columns)
num_cols = 1

colors = plt.cm.summer(np.linspace(0, 1, 5))

fig, axes = plt.subplots(num_rows, num_cols, figsize=(5, 5 * num_rows))

for i, feature in enumerate(feature_columns):

    top_5_crops = label_groupby.sort_values(by=feature, ascending=False)[:5]

    if num_rows > 1:
        ax = axes[i]
    else:
        ax = axes

    ax.bar(top_5_crops['label'], top_5_crops[feature], color = colors)
    ax.tick_params(axis='x', rotation=15)
    ax.set_title(f'Top 5 Crops Requiring {feature}')

import matplotlib.pyplot as plt
feature_columns = label_groupby.columns[1:]

num_rows = len(feature_columns)
num_cols = 1

colors = plt.cm.autumn(np.linspace(0, 1, 5))

fig, axes = plt.subplots(num_rows, num_cols, figsize=(5, 5 * num_rows))

for i, feature in enumerate(feature_columns):

    bottom_5_crops = label_groupby.sort_values(by=feature, ascending=True)[:5]

    if num_rows > 1:
        ax = axes[i]
    else:
        ax = axes

    ax.bar(bottom_5_crops['label'], bottom_5_crops[feature], color = colors)
    ax.tick_params(axis='x', rotation=15)
    ax.set_title(f'Bottom 5 Crops Requiring {feature}')

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

X = data.drop('label', axis =1)
y = data['label']


#sc = StandardScaler()
#X_scaled=sc.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.30, random_state=42)

import lightgbm as lgb

model = lgb.LGBMClassifier()
model.fit(X_train, y_train)

from sklearn.metrics import accuracy_score
y_pred=model.predict(X_test)

accuracy=accuracy_score(y_pred, y_test)
print('LightGBM Model accuracy score: {0:0.4f}'.format(accuracy_score(y_test, y_pred)))
print('Test set score: {:.4f}'.format(model.score(X_test, y_test)))

from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report

print(classification_report(y_test, y_pred))

print('**************************')
cm = confusion_matrix(y_test, y_pred)

plt.figure(figsize=(15,15))
sns.heatmap(cm, annot=True, fmt=".0f", linewidths=.5, square = True, cmap="crest");
plt.ylabel('Actual label');
plt.xlabel('Predicted label');
plt.title('Confusion Matrix', size = 15);
plt.show()

sample_data=model.predict([[31,76,82,20.8248451,17.85057083,7.599279991,79.20509212]])
sample_data
